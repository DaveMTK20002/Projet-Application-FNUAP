[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Application d‚Äôanalyse du sol",
    "section": "",
    "text": "Probl√©matique: La surexploitation du sol pos√© par le fait que la plupart des agriculteurs ne planifient pas leurs intervalles de plantation, ou alors ne font pas des √©tudes sur la qualit√© du sol ou sur son √©tat en termes de productivit√©.\nSolution propos√©e : Gr√¢ce √† IAGRIKOL, il est possible d‚Äôanalyser rapidement les caract√©ristiques du sol pour √©viter la surexploitation et accroitre les rendements.\nAvantage cl√© : Facilit√© d‚Äôutilisation, rapidit√©, et pr√©cision gr√¢ce √† des algorithmes avanc√©s de machine learning.\nD√©couvrir le projet\nTester l‚Äôapplication\n\n\n\nVoici une image de l‚Äôapplication: ‚Ä¶"
  },
  {
    "objectID": "index.html#pr√©sentation-du-projet",
    "href": "index.html#pr√©sentation-du-projet",
    "title": "Application d‚Äôanalyse du sol",
    "section": "",
    "text": "Probl√©matique: La surexploitation du sol pos√© par le fait que la plupart des agriculteurs ne planifient pas leurs intervalles de plantation, ou alors ne font pas des √©tudes sur la qualit√© du sol ou sur son √©tat en termes de productivit√©.\nSolution propos√©e : Gr√¢ce √† IAGRIKOL, il est possible d‚Äôanalyser rapidement les caract√©ristiques du sol pour √©viter la surexploitation et accroitre les rendements.\nAvantage cl√© : Facilit√© d‚Äôutilisation, rapidit√©, et pr√©cision gr√¢ce √† des algorithmes avanc√©s de machine learning.\nD√©couvrir le projet\nTester l‚Äôapplication\n\n\n\nVoici une image de l‚Äôapplication: ‚Ä¶"
  },
  {
    "objectID": "index.html#equipe-de-conception",
    "href": "index.html#equipe-de-conception",
    "title": "Application d‚Äôanalyse du sol",
    "section": "Equipe de conception",
    "text": "Equipe de conception\nCe projet a √©t√© d√©velopp√© par une √©quipe de passion√©s: - KOKOLO Reine Vertu - LOUSSINGUI BALENGUISSA Merveille - MOUNTEKA NDONDON Davick\n\n\n\n\n\n\nNote\n\n\n\nCe projet est √† l‚Äôinitiative de la gent f√©minine, organis√© dans le cadre de la journ√©e de la fille scientifique (Voir plus)"
  },
  {
    "objectID": "index.html#bibliographie",
    "href": "index.html#bibliographie",
    "title": "Application d‚Äôanalyse du sol",
    "section": "Bibliographie",
    "text": "Bibliographie\n\nMise en production des projets de data science, Romain Avouac & Lino Galiana (ENSAE)\nRefactoring.Guru"
  },
  {
    "objectID": "doc/context2.html",
    "href": "doc/context2.html",
    "title": "Webservices et formats de donn√©es",
    "section": "",
    "text": "üò± Comme vous pouvez le constater, le sujet de ce TP est lui aussi long. Cela ne doit pas vous effrayer.\nIl m√©lange explications compl√®tes et manipulations pour √™tre au maximum autosuffisant.\nVous n‚Äôallez surement pas terminer le sujet, ce n‚Äôest pas grave. Il est l√† pour vous aider lors du projet informatique.\n\n\n\n\n\n\nObjectifs\n\n\n\nDans ce TP vous allez :\n\nFaire des appels √† un webservice √† la main avec Insomnia\nFaire des appels √† un webservice avec la biblioth√®que python requests\nD√©couvrir la page swagger d‚Äôun webservice\nManipuler diff√©rents formats de donn√©es\nCr√©er un webservice avec le framework python fastAPI"
  },
  {
    "objectID": "doc/context2.html#avant-de-commencer",
    "href": "doc/context2.html#avant-de-commencer",
    "title": "Webservices et formats de donn√©es",
    "section": "",
    "text": "üò± Comme vous pouvez le constater, le sujet de ce TP est lui aussi long. Cela ne doit pas vous effrayer.\nIl m√©lange explications compl√®tes et manipulations pour √™tre au maximum autosuffisant.\nVous n‚Äôallez surement pas terminer le sujet, ce n‚Äôest pas grave. Il est l√† pour vous aider lors du projet informatique.\n\n\n\n\n\n\nObjectifs\n\n\n\nDans ce TP vous allez :\n\nFaire des appels √† un webservice √† la main avec Insomnia\nFaire des appels √† un webservice avec la biblioth√®que python requests\nD√©couvrir la page swagger d‚Äôun webservice\nManipuler diff√©rents formats de donn√©es\nCr√©er un webservice avec le framework python fastAPI"
  },
  {
    "objectID": "doc/context2.html#appeler-un-webservice-√†-la-main",
    "href": "doc/context2.html#appeler-un-webservice-√†-la-main",
    "title": "Webservices et formats de donn√©es",
    "section": "1 Appeler un webservice √† la main",
    "text": "1 Appeler un webservice √† la main\nLa premi√®re partie de ce TP ne n√©cessite pas d‚Äô√©crire du code, mais seulement de faire des requ√™tes √† un webservice en utilisant le logiciel Insomnia install√© sur votre machine.\n\n1.1 Webservices\n\n\n\n\n\n\nNote\n\n\n\nWebservice : le terme webservice est un terme vaste et il serait compliqu√© d‚Äôen donner une d√©finition courte (article wikipedia).\nDans le cadre du projet un webservice d√©signe une application accessible via le protocole HTTP (HyperText Transfer Protocol) qui respecte g√©n√©ralement l‚Äôarchitecture REST (REpresentational State Transfer).\nMais il en existe d‚Äôautre comme SOAP (Simple Objet- Access Protocol) ou RPC (Remote Procedure Call)\n\n\nEn d‚Äôautres termes, un webservice est une application accessible via le web que l‚Äôon va pouvoir requ√™ter soit :\n\npour obtenir des ressources\npour modifier les ressources accessibles.\n\nUn webservice peut seulement avoir pour but d‚Äô√™tre une point d‚Äôacc√®s unique et normalis√© √† des donn√©es (comme une interface √† une base de donn√©es), mais il peut √©galement √™tre une mani√®re de contr√¥ler un syst√®me d‚Äôinformations (lancer des travaux, les mettre en attente, r√©cup√©rer des r√©sultats‚Ä¶)\nLes webservices utilisent le protocole HTTP qui est le protocole du web (et pas d‚Äôinternet). C‚Äôest celui que vous utilisez sans le savoir avec votre navigateur web. Requ√™ter un webservice se fait presque comme requ√™ter une page web.\nPour cela il vous faut :\n\nl‚Äôadresse de la ressource, son Uniforme Resource Identifier (URI)\n\nc‚Äôest une notion plus g√©n√©rale que les Uniforme Resource Locator (URL)\n\nune m√©thode (GET, POST, PUT, DELETE, liste des m√©thodes)\net potentiellement des donn√©es\n\n\n\n1.2 Premi√®res requ√™tes GET\n\nLancez le programme Insomnia\n\nIcone Windows en bas √† gauche &gt; 5-Informatique\n\nCr√©ez une collection de requ√™te\n\nbouton Create √† droite\npuis cliquez sur votre collection\n\nCr√©ez une nouvelle requ√™te\n\nen appuyant sur CTRL+N\ndonnez lui un nom\nv√©rifiez que c‚Äôest bien une requ√™te de type GET\n\n\nDans la barre d‚Äôadresse, testez les requ√™tes des webservices ci-dessous :\n\nRegardez la r√©ponse dans la partie droite de votre √©cran\nQuelles sont les similarit√©s entre les r√©ponses ?"
  },
  {
    "objectID": "doc/avancee3.html",
    "href": "doc/avancee3.html",
    "title": "Webservices et formats de donn√©es",
    "section": "",
    "text": "üò± Comme vous pouvez le constater, le sujet de ce TP est lui aussi long. Cela ne doit pas vous effrayer.\nIl m√©lange explications compl√®tes et manipulations pour √™tre au maximum autosuffisant.\nVous n‚Äôallez surement pas terminer le sujet, ce n‚Äôest pas grave. Il est l√† pour vous aider lors du projet informatique.\n\n\n\n\n\n\nObjectifs\n\n\n\nDans ce TP vous allez :\n\nFaire des appels √† un webservice √† la main avec Insomnia\nFaire des appels √† un webservice avec la biblioth√®que python requests\nD√©couvrir la page swagger d‚Äôun webservice\nManipuler diff√©rents formats de donn√©es\nCr√©er un webservice avec le framework python fastAPI"
  },
  {
    "objectID": "doc/avancee3.html#avant-de-commencer",
    "href": "doc/avancee3.html#avant-de-commencer",
    "title": "Webservices et formats de donn√©es",
    "section": "",
    "text": "üò± Comme vous pouvez le constater, le sujet de ce TP est lui aussi long. Cela ne doit pas vous effrayer.\nIl m√©lange explications compl√®tes et manipulations pour √™tre au maximum autosuffisant.\nVous n‚Äôallez surement pas terminer le sujet, ce n‚Äôest pas grave. Il est l√† pour vous aider lors du projet informatique.\n\n\n\n\n\n\nObjectifs\n\n\n\nDans ce TP vous allez :\n\nFaire des appels √† un webservice √† la main avec Insomnia\nFaire des appels √† un webservice avec la biblioth√®que python requests\nD√©couvrir la page swagger d‚Äôun webservice\nManipuler diff√©rents formats de donn√©es\nCr√©er un webservice avec le framework python fastAPI"
  },
  {
    "objectID": "doc/avancee3.html#appeler-un-webservice-√†-la-main",
    "href": "doc/avancee3.html#appeler-un-webservice-√†-la-main",
    "title": "Webservices et formats de donn√©es",
    "section": "1 Appeler un webservice √† la main",
    "text": "1 Appeler un webservice √† la main\nLa premi√®re partie de ce TP ne n√©cessite pas d‚Äô√©crire du code, mais seulement de faire des requ√™tes √† un webservice en utilisant le logiciel Insomnia install√© sur votre machine.\n\n1.1 Webservices\n\n\n\n\n\n\nNote\n\n\n\nWebservice : le terme webservice est un terme vaste et il serait compliqu√© d‚Äôen donner une d√©finition courte (article wikipedia).\nDans le cadre du projet un webservice d√©signe une application accessible via le protocole HTTP (HyperText Transfer Protocol) qui respecte g√©n√©ralement l‚Äôarchitecture REST (REpresentational State Transfer).\nMais il en existe d‚Äôautre comme SOAP (Simple Objet- Access Protocol) ou RPC (Remote Procedure Call)\n\n\nEn d‚Äôautres termes, un webservice est une application accessible via le web que l‚Äôon va pouvoir requ√™ter soit :\n\npour obtenir des ressources\npour modifier les ressources accessibles.\n\nUn webservice peut seulement avoir pour but d‚Äô√™tre une point d‚Äôacc√®s unique et normalis√© √† des donn√©es (comme une interface √† une base de donn√©es), mais il peut √©galement √™tre une mani√®re de contr√¥ler un syst√®me d‚Äôinformations (lancer des travaux, les mettre en attente, r√©cup√©rer des r√©sultats‚Ä¶)\nLes webservices utilisent le protocole HTTP qui est le protocole du web (et pas d‚Äôinternet). C‚Äôest celui que vous utilisez sans le savoir avec votre navigateur web. Requ√™ter un webservice se fait presque comme requ√™ter une page web.\nPour cela il vous faut :\n\nl‚Äôadresse de la ressource, son Uniforme Resource Identifier (URI)\n\nc‚Äôest une notion plus g√©n√©rale que les Uniforme Resource Locator (URL)\n\nune m√©thode (GET, POST, PUT, DELETE, liste des m√©thodes)\net potentiellement des donn√©es\n\n\n\n1.2 Premi√®res requ√™tes GET\n\nLancez le programme Insomnia\n\nIcone Windows en bas √† gauche &gt; 5-Informatique\n\nCr√©ez une collection de requ√™te\n\nbouton Create √† droite\npuis cliquez sur votre collection\n\nCr√©ez une nouvelle requ√™te\n\nen appuyant sur CTRL+N\ndonnez lui un nom\nv√©rifiez que c‚Äôest bien une requ√™te de type GET\n\n\nDans la barre d‚Äôadresse, testez les requ√™tes des webservices ci-dessous :\n\nRegardez la r√©ponse dans la partie droite de votre √©cran\nQuelles sont les similarit√©s entre les r√©ponses ?"
  },
  {
    "objectID": "doc/avancee1.html",
    "href": "doc/avancee1.html",
    "title": "Webservices et formats de donn√©es",
    "section": "",
    "text": "üò± Comme vous pouvez le constater, le sujet de ce TP est lui aussi long. Cela ne doit pas vous effrayer.\nIl m√©lange explications compl√®tes et manipulations pour √™tre au maximum autosuffisant.\nVous n‚Äôallez surement pas terminer le sujet, ce n‚Äôest pas grave. Il est l√† pour vous aider lors du projet informatique.\n\n\n\n\n\n\nObjectifs\n\n\n\nDans ce TP vous allez :\n\nFaire des appels √† un webservice √† la main avec Insomnia\nFaire des appels √† un webservice avec la biblioth√®que python requests\nD√©couvrir la page swagger d‚Äôun webservice\nManipuler diff√©rents formats de donn√©es\nCr√©er un webservice avec le framework python fastAPI"
  },
  {
    "objectID": "doc/avancee1.html#avant-de-commencer",
    "href": "doc/avancee1.html#avant-de-commencer",
    "title": "Webservices et formats de donn√©es",
    "section": "",
    "text": "üò± Comme vous pouvez le constater, le sujet de ce TP est lui aussi long. Cela ne doit pas vous effrayer.\nIl m√©lange explications compl√®tes et manipulations pour √™tre au maximum autosuffisant.\nVous n‚Äôallez surement pas terminer le sujet, ce n‚Äôest pas grave. Il est l√† pour vous aider lors du projet informatique.\n\n\n\n\n\n\nObjectifs\n\n\n\nDans ce TP vous allez :\n\nFaire des appels √† un webservice √† la main avec Insomnia\nFaire des appels √† un webservice avec la biblioth√®que python requests\nD√©couvrir la page swagger d‚Äôun webservice\nManipuler diff√©rents formats de donn√©es\nCr√©er un webservice avec le framework python fastAPI"
  },
  {
    "objectID": "doc/avancee1.html#appeler-un-webservice-√†-la-main",
    "href": "doc/avancee1.html#appeler-un-webservice-√†-la-main",
    "title": "Webservices et formats de donn√©es",
    "section": "1 Appeler un webservice √† la main",
    "text": "1 Appeler un webservice √† la main\nLa premi√®re partie de ce TP ne n√©cessite pas d‚Äô√©crire du code, mais seulement de faire des requ√™tes √† un webservice en utilisant le logiciel Insomnia install√© sur votre machine.\n\n1.1 Webservices\n\n\n\n\n\n\nNote\n\n\n\nWebservice : le terme webservice est un terme vaste et il serait compliqu√© d‚Äôen donner une d√©finition courte (article wikipedia).\nDans le cadre du projet un webservice d√©signe une application accessible via le protocole HTTP (HyperText Transfer Protocol) qui respecte g√©n√©ralement l‚Äôarchitecture REST (REpresentational State Transfer).\nMais il en existe d‚Äôautre comme SOAP (Simple Objet- Access Protocol) ou RPC (Remote Procedure Call)\n\n\nEn d‚Äôautres termes, un webservice est une application accessible via le web que l‚Äôon va pouvoir requ√™ter soit :\n\npour obtenir des ressources\npour modifier les ressources accessibles.\n\nUn webservice peut seulement avoir pour but d‚Äô√™tre une point d‚Äôacc√®s unique et normalis√© √† des donn√©es (comme une interface √† une base de donn√©es), mais il peut √©galement √™tre une mani√®re de contr√¥ler un syst√®me d‚Äôinformations (lancer des travaux, les mettre en attente, r√©cup√©rer des r√©sultats‚Ä¶)\nLes webservices utilisent le protocole HTTP qui est le protocole du web (et pas d‚Äôinternet). C‚Äôest celui que vous utilisez sans le savoir avec votre navigateur web. Requ√™ter un webservice se fait presque comme requ√™ter une page web.\nPour cela il vous faut :\n\nl‚Äôadresse de la ressource, son Uniforme Resource Identifier (URI)\n\nc‚Äôest une notion plus g√©n√©rale que les Uniforme Resource Locator (URL)\n\nune m√©thode (GET, POST, PUT, DELETE, liste des m√©thodes)\net potentiellement des donn√©es\n\n\n\n1.2 Premi√®res requ√™tes GET\n\nLancez le programme Insomnia\n\nIcone Windows en bas √† gauche &gt; 5-Informatique\n\nCr√©ez une collection de requ√™te\n\nbouton Create √† droite\npuis cliquez sur votre collection\n\nCr√©ez une nouvelle requ√™te\n\nen appuyant sur CTRL+N\ndonnez lui un nom\nv√©rifiez que c‚Äôest bien une requ√™te de type GET\n\n\nDans la barre d‚Äôadresse, testez les requ√™tes des webservices ci-dessous :\n\nRegardez la r√©ponse dans la partie droite de votre √©cran\nQuelles sont les similarit√©s entre les r√©ponses ?"
  },
  {
    "objectID": "doc/application1.html",
    "href": "doc/application1.html",
    "title": "Webservices et formats de donn√©es",
    "section": "",
    "text": "üò± Comme vous pouvez le constater, le sujet de ce TP est lui aussi long. Cela ne doit pas vous effrayer.\nIl m√©lange explications compl√®tes et manipulations pour √™tre au maximum autosuffisant.\nVous n‚Äôallez surement pas terminer le sujet, ce n‚Äôest pas grave. Il est l√† pour vous aider lors du projet informatique.\n\n\n\n\n\n\nObjectifs\n\n\n\nDans ce TP vous allez :\n\nFaire des appels √† un webservice √† la main avec Insomnia\nFaire des appels √† un webservice avec la biblioth√®que python requests\nD√©couvrir la page swagger d‚Äôun webservice\nManipuler diff√©rents formats de donn√©es\nCr√©er un webservice avec le framework python fastAPI"
  },
  {
    "objectID": "doc/application1.html#avant-de-commencer",
    "href": "doc/application1.html#avant-de-commencer",
    "title": "Webservices et formats de donn√©es",
    "section": "",
    "text": "üò± Comme vous pouvez le constater, le sujet de ce TP est lui aussi long. Cela ne doit pas vous effrayer.\nIl m√©lange explications compl√®tes et manipulations pour √™tre au maximum autosuffisant.\nVous n‚Äôallez surement pas terminer le sujet, ce n‚Äôest pas grave. Il est l√† pour vous aider lors du projet informatique.\n\n\n\n\n\n\nObjectifs\n\n\n\nDans ce TP vous allez :\n\nFaire des appels √† un webservice √† la main avec Insomnia\nFaire des appels √† un webservice avec la biblioth√®que python requests\nD√©couvrir la page swagger d‚Äôun webservice\nManipuler diff√©rents formats de donn√©es\nCr√©er un webservice avec le framework python fastAPI"
  },
  {
    "objectID": "doc/application1.html#appeler-un-webservice-√†-la-main",
    "href": "doc/application1.html#appeler-un-webservice-√†-la-main",
    "title": "Webservices et formats de donn√©es",
    "section": "1 Appeler un webservice √† la main",
    "text": "1 Appeler un webservice √† la main\nLa premi√®re partie de ce TP ne n√©cessite pas d‚Äô√©crire du code, mais seulement de faire des requ√™tes √† un webservice en utilisant le logiciel Insomnia install√© sur votre machine.\n\n1.1 Webservices\n\n\n\n\n\n\nNote\n\n\n\nWebservice : le terme webservice est un terme vaste et il serait compliqu√© d‚Äôen donner une d√©finition courte (article wikipedia).\nDans le cadre du projet un webservice d√©signe une application accessible via le protocole HTTP (HyperText Transfer Protocol) qui respecte g√©n√©ralement l‚Äôarchitecture REST (REpresentational State Transfer).\nMais il en existe d‚Äôautre comme SOAP (Simple Objet- Access Protocol) ou RPC (Remote Procedure Call)\n\n\nEn d‚Äôautres termes, un webservice est une application accessible via le web que l‚Äôon va pouvoir requ√™ter soit :\n\npour obtenir des ressources\npour modifier les ressources accessibles.\n\nUn webservice peut seulement avoir pour but d‚Äô√™tre une point d‚Äôacc√®s unique et normalis√© √† des donn√©es (comme une interface √† une base de donn√©es), mais il peut √©galement √™tre une mani√®re de contr√¥ler un syst√®me d‚Äôinformations (lancer des travaux, les mettre en attente, r√©cup√©rer des r√©sultats‚Ä¶)\nLes webservices utilisent le protocole HTTP qui est le protocole du web (et pas d‚Äôinternet). C‚Äôest celui que vous utilisez sans le savoir avec votre navigateur web. Requ√™ter un webservice se fait presque comme requ√™ter une page web.\nPour cela il vous faut :\n\nl‚Äôadresse de la ressource, son Uniforme Resource Identifier (URI)\n\nc‚Äôest une notion plus g√©n√©rale que les Uniforme Resource Locator (URL)\n\nune m√©thode (GET, POST, PUT, DELETE, liste des m√©thodes)\net potentiellement des donn√©es\n\n\n\n1.2 Premi√®res requ√™tes GET\n\nLancez le programme Insomnia\n\nIcone Windows en bas √† gauche &gt; 5-Informatique\n\nCr√©ez une collection de requ√™te\n\nbouton Create √† droite\npuis cliquez sur votre collection\n\nCr√©ez une nouvelle requ√™te\n\nen appuyant sur CTRL+N\ndonnez lui un nom\nv√©rifiez que c‚Äôest bien une requ√™te de type GET\n\n\nDans la barre d‚Äôadresse, testez les requ√™tes des webservices ci-dessous :\n\nRegardez la r√©ponse dans la partie droite de votre √©cran\nQuelles sont les similarit√©s entre les r√©ponses ?"
  },
  {
    "objectID": "doc/application2.html",
    "href": "doc/application2.html",
    "title": "Webservices et formats de donn√©es",
    "section": "",
    "text": "üò± Comme vous pouvez le constater, le sujet de ce TP est lui aussi long. Cela ne doit pas vous effrayer.\nIl m√©lange explications compl√®tes et manipulations pour √™tre au maximum autosuffisant.\nVous n‚Äôallez surement pas terminer le sujet, ce n‚Äôest pas grave. Il est l√† pour vous aider lors du projet informatique.\n\n\n\n\n\n\nObjectifs\n\n\n\nDans ce TP vous allez :\n\nFaire des appels √† un webservice √† la main avec Insomnia\nFaire des appels √† un webservice avec la biblioth√®que python requests\nD√©couvrir la page swagger d‚Äôun webservice\nManipuler diff√©rents formats de donn√©es\nCr√©er un webservice avec le framework python fastAPI"
  },
  {
    "objectID": "doc/application2.html#avant-de-commencer",
    "href": "doc/application2.html#avant-de-commencer",
    "title": "Webservices et formats de donn√©es",
    "section": "",
    "text": "üò± Comme vous pouvez le constater, le sujet de ce TP est lui aussi long. Cela ne doit pas vous effrayer.\nIl m√©lange explications compl√®tes et manipulations pour √™tre au maximum autosuffisant.\nVous n‚Äôallez surement pas terminer le sujet, ce n‚Äôest pas grave. Il est l√† pour vous aider lors du projet informatique.\n\n\n\n\n\n\nObjectifs\n\n\n\nDans ce TP vous allez :\n\nFaire des appels √† un webservice √† la main avec Insomnia\nFaire des appels √† un webservice avec la biblioth√®que python requests\nD√©couvrir la page swagger d‚Äôun webservice\nManipuler diff√©rents formats de donn√©es\nCr√©er un webservice avec le framework python fastAPI"
  },
  {
    "objectID": "doc/application2.html#appeler-un-webservice-√†-la-main",
    "href": "doc/application2.html#appeler-un-webservice-√†-la-main",
    "title": "Webservices et formats de donn√©es",
    "section": "1 Appeler un webservice √† la main",
    "text": "1 Appeler un webservice √† la main\nLa premi√®re partie de ce TP ne n√©cessite pas d‚Äô√©crire du code, mais seulement de faire des requ√™tes √† un webservice en utilisant le logiciel Insomnia install√© sur votre machine.\n\n1.1 Webservices\n\n\n\n\n\n\nNote\n\n\n\nWebservice : le terme webservice est un terme vaste et il serait compliqu√© d‚Äôen donner une d√©finition courte (article wikipedia).\nDans le cadre du projet un webservice d√©signe une application accessible via le protocole HTTP (HyperText Transfer Protocol) qui respecte g√©n√©ralement l‚Äôarchitecture REST (REpresentational State Transfer).\nMais il en existe d‚Äôautre comme SOAP (Simple Objet- Access Protocol) ou RPC (Remote Procedure Call)\n\n\nEn d‚Äôautres termes, un webservice est une application accessible via le web que l‚Äôon va pouvoir requ√™ter soit :\n\npour obtenir des ressources\npour modifier les ressources accessibles.\n\nUn webservice peut seulement avoir pour but d‚Äô√™tre une point d‚Äôacc√®s unique et normalis√© √† des donn√©es (comme une interface √† une base de donn√©es), mais il peut √©galement √™tre une mani√®re de contr√¥ler un syst√®me d‚Äôinformations (lancer des travaux, les mettre en attente, r√©cup√©rer des r√©sultats‚Ä¶)\nLes webservices utilisent le protocole HTTP qui est le protocole du web (et pas d‚Äôinternet). C‚Äôest celui que vous utilisez sans le savoir avec votre navigateur web. Requ√™ter un webservice se fait presque comme requ√™ter une page web.\nPour cela il vous faut :\n\nl‚Äôadresse de la ressource, son Uniforme Resource Identifier (URI)\n\nc‚Äôest une notion plus g√©n√©rale que les Uniforme Resource Locator (URL)\n\nune m√©thode (GET, POST, PUT, DELETE, liste des m√©thodes)\net potentiellement des donn√©es\n\n\n\n1.2 Premi√®res requ√™tes GET\n\nLancez le programme Insomnia\n\nIcone Windows en bas √† gauche &gt; 5-Informatique\n\nCr√©ez une collection de requ√™te\n\nbouton Create √† droite\npuis cliquez sur votre collection\n\nCr√©ez une nouvelle requ√™te\n\nen appuyant sur CTRL+N\ndonnez lui un nom\nv√©rifiez que c‚Äôest bien une requ√™te de type GET\n\n\nDans la barre d‚Äôadresse, testez les requ√™tes des webservices ci-dessous :\n\nRegardez la r√©ponse dans la partie droite de votre √©cran\nQuelles sont les similarit√©s entre les r√©ponses ?"
  },
  {
    "objectID": "doc/avancee2.html",
    "href": "doc/avancee2.html",
    "title": "Webservices et formats de donn√©es",
    "section": "",
    "text": "üò± Comme vous pouvez le constater, le sujet de ce TP est lui aussi long. Cela ne doit pas vous effrayer.\nIl m√©lange explications compl√®tes et manipulations pour √™tre au maximum autosuffisant.\nVous n‚Äôallez surement pas terminer le sujet, ce n‚Äôest pas grave. Il est l√† pour vous aider lors du projet informatique.\n\n\n\n\n\n\nObjectifs\n\n\n\nDans ce TP vous allez :\n\nFaire des appels √† un webservice √† la main avec Insomnia\nFaire des appels √† un webservice avec la biblioth√®que python requests\nD√©couvrir la page swagger d‚Äôun webservice\nManipuler diff√©rents formats de donn√©es\nCr√©er un webservice avec le framework python fastAPI"
  },
  {
    "objectID": "doc/avancee2.html#avant-de-commencer",
    "href": "doc/avancee2.html#avant-de-commencer",
    "title": "Webservices et formats de donn√©es",
    "section": "",
    "text": "üò± Comme vous pouvez le constater, le sujet de ce TP est lui aussi long. Cela ne doit pas vous effrayer.\nIl m√©lange explications compl√®tes et manipulations pour √™tre au maximum autosuffisant.\nVous n‚Äôallez surement pas terminer le sujet, ce n‚Äôest pas grave. Il est l√† pour vous aider lors du projet informatique.\n\n\n\n\n\n\nObjectifs\n\n\n\nDans ce TP vous allez :\n\nFaire des appels √† un webservice √† la main avec Insomnia\nFaire des appels √† un webservice avec la biblioth√®que python requests\nD√©couvrir la page swagger d‚Äôun webservice\nManipuler diff√©rents formats de donn√©es\nCr√©er un webservice avec le framework python fastAPI"
  },
  {
    "objectID": "doc/avancee2.html#appeler-un-webservice-√†-la-main",
    "href": "doc/avancee2.html#appeler-un-webservice-√†-la-main",
    "title": "Webservices et formats de donn√©es",
    "section": "1 Appeler un webservice √† la main",
    "text": "1 Appeler un webservice √† la main\nLa premi√®re partie de ce TP ne n√©cessite pas d‚Äô√©crire du code, mais seulement de faire des requ√™tes √† un webservice en utilisant le logiciel Insomnia install√© sur votre machine.\n\n1.1 Webservices\n\n\n\n\n\n\nNote\n\n\n\nWebservice : le terme webservice est un terme vaste et il serait compliqu√© d‚Äôen donner une d√©finition courte (article wikipedia).\nDans le cadre du projet un webservice d√©signe une application accessible via le protocole HTTP (HyperText Transfer Protocol) qui respecte g√©n√©ralement l‚Äôarchitecture REST (REpresentational State Transfer).\nMais il en existe d‚Äôautre comme SOAP (Simple Objet- Access Protocol) ou RPC (Remote Procedure Call)\n\n\nEn d‚Äôautres termes, un webservice est une application accessible via le web que l‚Äôon va pouvoir requ√™ter soit :\n\npour obtenir des ressources\npour modifier les ressources accessibles.\n\nUn webservice peut seulement avoir pour but d‚Äô√™tre une point d‚Äôacc√®s unique et normalis√© √† des donn√©es (comme une interface √† une base de donn√©es), mais il peut √©galement √™tre une mani√®re de contr√¥ler un syst√®me d‚Äôinformations (lancer des travaux, les mettre en attente, r√©cup√©rer des r√©sultats‚Ä¶)\nLes webservices utilisent le protocole HTTP qui est le protocole du web (et pas d‚Äôinternet). C‚Äôest celui que vous utilisez sans le savoir avec votre navigateur web. Requ√™ter un webservice se fait presque comme requ√™ter une page web.\nPour cela il vous faut :\n\nl‚Äôadresse de la ressource, son Uniforme Resource Identifier (URI)\n\nc‚Äôest une notion plus g√©n√©rale que les Uniforme Resource Locator (URL)\n\nune m√©thode (GET, POST, PUT, DELETE, liste des m√©thodes)\net potentiellement des donn√©es\n\n\n\n1.2 Premi√®res requ√™tes GET\n\nLancez le programme Insomnia\n\nIcone Windows en bas √† gauche &gt; 5-Informatique\n\nCr√©ez une collection de requ√™te\n\nbouton Create √† droite\npuis cliquez sur votre collection\n\nCr√©ez une nouvelle requ√™te\n\nen appuyant sur CTRL+N\ndonnez lui un nom\nv√©rifiez que c‚Äôest bien une requ√™te de type GET\n\n\nDans la barre d‚Äôadresse, testez les requ√™tes des webservices ci-dessous :\n\nRegardez la r√©ponse dans la partie droite de votre √©cran\nQuelles sont les similarit√©s entre les r√©ponses ?"
  },
  {
    "objectID": "doc/context1.html",
    "href": "doc/context1.html",
    "title": "Webservices et formats de donn√©es",
    "section": "",
    "text": "üò± Comme vous pouvez le constater, le sujet de ce TP est lui aussi long. Cela ne doit pas vous effrayer.\nIl m√©lange explications compl√®tes et manipulations pour √™tre au maximum autosuffisant.\nVous n‚Äôallez surement pas terminer le sujet, ce n‚Äôest pas grave. Il est l√† pour vous aider lors du projet informatique.\n\n\n\n\n\n\nObjectifs\n\n\n\nDans ce TP vous allez :\n\nFaire des appels √† un webservice √† la main avec Insomnia\nFaire des appels √† un webservice avec la biblioth√®que python requests\nD√©couvrir la page swagger d‚Äôun webservice\nManipuler diff√©rents formats de donn√©es\nCr√©er un webservice avec le framework python fastAPI"
  },
  {
    "objectID": "doc/context1.html#avant-de-commencer",
    "href": "doc/context1.html#avant-de-commencer",
    "title": "Webservices et formats de donn√©es",
    "section": "",
    "text": "üò± Comme vous pouvez le constater, le sujet de ce TP est lui aussi long. Cela ne doit pas vous effrayer.\nIl m√©lange explications compl√®tes et manipulations pour √™tre au maximum autosuffisant.\nVous n‚Äôallez surement pas terminer le sujet, ce n‚Äôest pas grave. Il est l√† pour vous aider lors du projet informatique.\n\n\n\n\n\n\nObjectifs\n\n\n\nDans ce TP vous allez :\n\nFaire des appels √† un webservice √† la main avec Insomnia\nFaire des appels √† un webservice avec la biblioth√®que python requests\nD√©couvrir la page swagger d‚Äôun webservice\nManipuler diff√©rents formats de donn√©es\nCr√©er un webservice avec le framework python fastAPI"
  },
  {
    "objectID": "doc/context1.html#appeler-un-webservice-√†-la-main",
    "href": "doc/context1.html#appeler-un-webservice-√†-la-main",
    "title": "Webservices et formats de donn√©es",
    "section": "1 Appeler un webservice √† la main",
    "text": "1 Appeler un webservice √† la main\nLa premi√®re partie de ce TP ne n√©cessite pas d‚Äô√©crire du code, mais seulement de faire des requ√™tes √† un webservice en utilisant le logiciel Insomnia install√© sur votre machine.\n\n1.1 Webservices\n\n\n\n\n\n\nNote\n\n\n\nWebservice : le terme webservice est un terme vaste et il serait compliqu√© d‚Äôen donner une d√©finition courte (article wikipedia).\nDans le cadre du projet un webservice d√©signe une application accessible via le protocole HTTP (HyperText Transfer Protocol) qui respecte g√©n√©ralement l‚Äôarchitecture REST (REpresentational State Transfer).\nMais il en existe d‚Äôautre comme SOAP (Simple Objet- Access Protocol) ou RPC (Remote Procedure Call)\n\n\nEn d‚Äôautres termes, un webservice est une application accessible via le web que l‚Äôon va pouvoir requ√™ter soit :\n\npour obtenir des ressources\npour modifier les ressources accessibles.\n\nUn webservice peut seulement avoir pour but d‚Äô√™tre une point d‚Äôacc√®s unique et normalis√© √† des donn√©es (comme une interface √† une base de donn√©es), mais il peut √©galement √™tre une mani√®re de contr√¥ler un syst√®me d‚Äôinformations (lancer des travaux, les mettre en attente, r√©cup√©rer des r√©sultats‚Ä¶)\nLes webservices utilisent le protocole HTTP qui est le protocole du web (et pas d‚Äôinternet). C‚Äôest celui que vous utilisez sans le savoir avec votre navigateur web. Requ√™ter un webservice se fait presque comme requ√™ter une page web.\nPour cela il vous faut :\n\nl‚Äôadresse de la ressource, son Uniforme Resource Identifier (URI)\n\nc‚Äôest une notion plus g√©n√©rale que les Uniforme Resource Locator (URL)\n\nune m√©thode (GET, POST, PUT, DELETE, liste des m√©thodes)\net potentiellement des donn√©es\n\n\n\n1.2 Premi√®res requ√™tes GET\n\nLancez le programme Insomnia\n\nIcone Windows en bas √† gauche &gt; 5-Informatique\n\nCr√©ez une collection de requ√™te\n\nbouton Create √† droite\npuis cliquez sur votre collection\n\nCr√©ez une nouvelle requ√™te\n\nen appuyant sur CTRL+N\ndonnez lui un nom\nv√©rifiez que c‚Äôest bien une requ√™te de type GET\n\n\nDans la barre d‚Äôadresse, testez les requ√™tes des webservices ci-dessous :\n\nRegardez la r√©ponse dans la partie droite de votre √©cran\nQuelles sont les similarit√©s entre les r√©ponses ?"
  },
  {
    "objectID": "doc/context3.html",
    "href": "doc/context3.html",
    "title": "Webservices et formats de donn√©es",
    "section": "",
    "text": "üò± Comme vous pouvez le constater, le sujet de ce TP est lui aussi long. Cela ne doit pas vous effrayer.\nIl m√©lange explications compl√®tes et manipulations pour √™tre au maximum autosuffisant.\nVous n‚Äôallez surement pas terminer le sujet, ce n‚Äôest pas grave. Il est l√† pour vous aider lors du projet informatique.\n\n\n\n\n\n\nObjectifs\n\n\n\nDans ce TP vous allez :\n\nFaire des appels √† un webservice √† la main avec Insomnia\nFaire des appels √† un webservice avec la biblioth√®que python requests\nD√©couvrir la page swagger d‚Äôun webservice\nManipuler diff√©rents formats de donn√©es\nCr√©er un webservice avec le framework python fastAPI"
  },
  {
    "objectID": "doc/context3.html#avant-de-commencer",
    "href": "doc/context3.html#avant-de-commencer",
    "title": "Webservices et formats de donn√©es",
    "section": "",
    "text": "üò± Comme vous pouvez le constater, le sujet de ce TP est lui aussi long. Cela ne doit pas vous effrayer.\nIl m√©lange explications compl√®tes et manipulations pour √™tre au maximum autosuffisant.\nVous n‚Äôallez surement pas terminer le sujet, ce n‚Äôest pas grave. Il est l√† pour vous aider lors du projet informatique.\n\n\n\n\n\n\nObjectifs\n\n\n\nDans ce TP vous allez :\n\nFaire des appels √† un webservice √† la main avec Insomnia\nFaire des appels √† un webservice avec la biblioth√®que python requests\nD√©couvrir la page swagger d‚Äôun webservice\nManipuler diff√©rents formats de donn√©es\nCr√©er un webservice avec le framework python fastAPI"
  },
  {
    "objectID": "doc/context3.html#appeler-un-webservice-√†-la-main",
    "href": "doc/context3.html#appeler-un-webservice-√†-la-main",
    "title": "Webservices et formats de donn√©es",
    "section": "1 Appeler un webservice √† la main",
    "text": "1 Appeler un webservice √† la main\nLa premi√®re partie de ce TP ne n√©cessite pas d‚Äô√©crire du code, mais seulement de faire des requ√™tes √† un webservice en utilisant le logiciel Insomnia install√© sur votre machine.\n\n1.1 Webservices\n\n\n\n\n\n\nNote\n\n\n\nWebservice : le terme webservice est un terme vaste et il serait compliqu√© d‚Äôen donner une d√©finition courte (article wikipedia).\nDans le cadre du projet un webservice d√©signe une application accessible via le protocole HTTP (HyperText Transfer Protocol) qui respecte g√©n√©ralement l‚Äôarchitecture REST (REpresentational State Transfer).\nMais il en existe d‚Äôautre comme SOAP (Simple Objet- Access Protocol) ou RPC (Remote Procedure Call)\n\n\nEn d‚Äôautres termes, un webservice est une application accessible via le web que l‚Äôon va pouvoir requ√™ter soit :\n\npour obtenir des ressources\npour modifier les ressources accessibles.\n\nUn webservice peut seulement avoir pour but d‚Äô√™tre une point d‚Äôacc√®s unique et normalis√© √† des donn√©es (comme une interface √† une base de donn√©es), mais il peut √©galement √™tre une mani√®re de contr√¥ler un syst√®me d‚Äôinformations (lancer des travaux, les mettre en attente, r√©cup√©rer des r√©sultats‚Ä¶)\nLes webservices utilisent le protocole HTTP qui est le protocole du web (et pas d‚Äôinternet). C‚Äôest celui que vous utilisez sans le savoir avec votre navigateur web. Requ√™ter un webservice se fait presque comme requ√™ter une page web.\nPour cela il vous faut :\n\nl‚Äôadresse de la ressource, son Uniforme Resource Identifier (URI)\n\nc‚Äôest une notion plus g√©n√©rale que les Uniforme Resource Locator (URL)\n\nune m√©thode (GET, POST, PUT, DELETE, liste des m√©thodes)\net potentiellement des donn√©es\n\n\n\n1.2 Premi√®res requ√™tes GET\n\nLancez le programme Insomnia\n\nIcone Windows en bas √† gauche &gt; 5-Informatique\n\nCr√©ez une collection de requ√™te\n\nbouton Create √† droite\npuis cliquez sur votre collection\n\nCr√©ez une nouvelle requ√™te\n\nen appuyant sur CTRL+N\ndonnez lui un nom\nv√©rifiez que c‚Äôest bien une requ√™te de type GET\n\n\nDans la barre d‚Äôadresse, testez les requ√™tes des webservices ci-dessous :\n\nRegardez la r√©ponse dans la partie droite de votre √©cran\nQuelles sont les similarit√©s entre les r√©ponses ?"
  }
]